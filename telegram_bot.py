import os
from loguru import logger
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import rag_pipeline
import config


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Genshin Impact RAG –±–æ—Ç!

–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª–æ—Ä—É Genshin Impact –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Genshin Impact Lore.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –≥–µ—Ä–æ—è—Ö –ö–∞—ç–Ω—Ä–∏'–∞—Ö
‚Ä¢ –ö—Ç–æ —Ç–∞–∫–æ–π –®–∏—É–∫–æ–∞—Ç–ª—å?
"""
    await update.message.reply_text(welcome_text)


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    status = rag_pipeline.get_status()
    status_text = "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if status["initialized"] else "‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    details = f"""
–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status_text}

–î–µ—Ç–∞–ª–∏:
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {'‚úÖ' if status['vectorstore_loaded'] else '‚ùå'}
‚Ä¢ –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å: {'‚úÖ' if status['llm_loaded'] else '‚ùå'}
"""
    await update.message.reply_text(details)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.effective_user.id
    
    logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")
    
    await update.message.chat.send_action(action="typing")
    
    try:
        response = rag_pipeline.ask_question(user_message)
        
        await update.message.reply_text(response)
        logger.success(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {user_id}")
        
    except Exception as e:
        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
        await update.message.reply_text(error_message)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")


def initialize_bot():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    rag_pipeline.initialize()


def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    try:
        initialize_bot()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return
    
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    logger.success("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)